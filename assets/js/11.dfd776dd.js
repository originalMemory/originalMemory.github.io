(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{435:function(t,n,s){"use strict";s.r(n);var a=s(17),e=function(t){t.options.__data__block__={mermaid_382ee244:"graph TD;\n1(SentryAndroidOptions);\n2(SentryOptions);\n3(UncaughtExceptionHandlerIntegration);\n4(integration.register);\n5(UncaughtExceptionHandler.Adapter.instance.setDefaultUncaughtExceptionHandler);\n6(Thread.setDefaultUncaughtExceptionHandler);\n1--基类--\x3e2;\n2--非空初始化时添加 integration--\x3e3;\n3--itegration register hub--\x3e4;\n4--\x3e5;\n5--\x3e6;"}},r=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("为 module 形式接入的 Flutter 接入 Sentry ，且与主项目的 Sentry 区分上报到不同项目。")]),t._v(" "),s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),s("p",[t._v("项目以 module 形式接入了 Flutter ，期望为 Flutter 接入 Sentry 来捕获异常，监控线上状态。但主项目里也接入了 Sentry ，期望主项目和 Flutter 上报到不同位置。")]),t._v(" "),s("h2",{attrs:{id:"plugin-选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugin-选择"}},[t._v("#")]),t._v(" Plugin 选择")]),t._v(" "),s("p",[t._v("Sentry 在 Flutter 里有2个官方库 "),s("code",[t._v("sentry")]),t._v(" 和 "),s("code",[t._v("sentry_flutter")]),t._v(" 。")]),t._v(" "),s("p",[t._v("其中 "),s("code",[t._v("sentry")]),t._v(" 是纯 dart 实现，上报不经过 Native，可以完美实现和主项目的 Sentry 区分上报，但是上报的信息里完全没有设备信息，如手机型号、系统版本等数据。")]),t._v(" "),s("p",[s("code",[t._v("sentry_flutter")]),t._v(" 则包含了 Native 的实现，上报最后会转接 Native 去上报，这种上报能带上设备信息，但是因为 Sentry 的 Native 代码是单例，直接引用 "),s("code",[t._v("sentry_flutter")]),t._v(" 会导致 Flutter 和 Native 的 Sentry 配置相互覆盖（具体覆盖顺序取决于初始化顺序），最后上报到同一个项目中去。")]),t._v(" "),s("p",[t._v("因为期望在上报的时候能带上设备信息，所以最后选择了使用 "),s("code",[t._v("sentry_flutter")]),t._v(" ，同时为了实现区分上报功能，故 fork 了 "),s("code",[t._v("sentry_flutter")]),t._v(" 的源码，修改")]),t._v(" "),s("p",[t._v("实现了分开上报的功能。")]),t._v(" "),s("h2",{attrs:{id:"实现方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现方案"}},[t._v("#")]),t._v(" 实现方案")]),t._v(" "),s("h3",{attrs:{id:"手动创建-sentryhub"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动创建-sentryhub"}},[t._v("#")]),t._v(" 手动创建 SentryHub")]),t._v(" "),s("p",[t._v("Sentry 的上报是基于 SentryHub 来进行的，要分开上报就需要创建只属于 Flutter 的 SentryHub。")]),t._v(" "),s("p",[t._v("这一步基本就是照着两端的初始化流程抄了一遍，创建单独的 SentryOptions 和 SentryHub ，由 Plugin 自行维护，后续上报和关闭均用该 hub 进行。")]),t._v(" "),s("p",[t._v("iOS 创建流程参考 "),s("code",[t._v("SentrySDK.startWithConfigureOptions()")]),t._v(" ，Android 创建流程参考 "),s("code",[t._v("SentryAndroid.init()")]),t._v(" 。")]),t._v(" "),s("p",[t._v("但创建后实际上报时发现，虽然是上报到独立的 dsn ，也没有影响到 Native 的上报，但是和 Native 相比缺少很多 context 信息，如设备型号和系统信息等。刚发现不对时以为是我创建流程写得不对，又对比了一遍创建流程，发现没有什么区别，于是开始进一步查看 context 相关的源码，想办法为 Flutter 的 hub 在上报时附加相关 context 信息。因为两端实现差距较大，后续流程分开描述。")]),t._v(" "),s("blockquote",[s("p",[t._v("初始化时有一点需要注意的是，不能够参考 Native 里去调 integration 的 register 。在 Android 端会影响到 Native Crash 的捕获。具体详见下文。")])]),t._v(" "),s("h3",{attrs:{id:"ios-附加-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ios-附加-context"}},[t._v("#")]),t._v(" iOS 附加 Context")]),t._v(" "),s("p",[t._v("iOS 的 context 是 options 里的 "),s("strong",[t._v("integrations")]),t._v(" 添加上去的，在初始化结束后就往 hub.scope 添加好了。在创建 Flutter 的 hub 时，也对 options 里的 integrations 执行了相应的 install 操作，但执行后没有并没有为 scope 赋值，看了各个 integration 的源码，发现内部均是直接指向了 Native 的单例 hub ，在外面再怎么调用 install 都是没有用的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://illusion-blog.oss-cn-beijing.aliyuncs.com/img/202110151418114.png",alt:"Untitled"}})]),t._v(" "),s("p",[t._v("并且因为 currentHub 和 scope 均为 private ，只能通过 "),s("code",[t._v("SentrySDK.configureScope()")]),t._v(" 间接访问，最后从 SentrySDK 里取已经配置好的单例 scope 复制一份给自建 hub 。")]),t._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" flutterScope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scope")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SentrySDK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configureScope "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" scope "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n    flutterScope "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hub "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SentryHub")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" andScope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flutterScope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("至此 iOS 上报就结束了。")]),t._v(" "),s("h3",{attrs:{id:"android-附加-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#android-附加-context"}},[t._v("#")]),t._v(" Android 附加 context")]),t._v(" "),s("p",[t._v("起初以为 Android 和 iOS 附加的方式是一样的，复制一份 scope 就行，且因为 Android 里 scope 和 scope.context 不再是 private ，写起复制来说更容易。但是写完一测，发现还是没有，于是又翻起了 Android 侧的源码，发现两边赋值逻辑不一样。")]),t._v(" "),s("p",[t._v("Android 的 options 里多了 1 个 "),s("strong",[t._v("eventProcessors")]),t._v(" 属性，context 相关的内容是存放在这里，且因为其中1个 "),s("code",[t._v("DefaultAndroidEventProcessor")]),t._v(" 和创建它的 "),s("code",[t._v("AndroidOptionsInitializer.init()")]),t._v(" 均是私有类，在初始化内部还会去读取 xml 覆盖 options 的设置，最后手动复制了 1 份 eventProcessors 。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" nativeOptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HubAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" flutterOptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SentryAndroidOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nflutterOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enableUncaughtExceptionHandler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("processor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" nativeOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventProcessors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    flutterOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventProcessor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("processor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("configOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flutterOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" hub "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Hub")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flutterOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("复制之后，用 "),s("code",[t._v("hub.captureMessage()")]),t._v(" 测试上报有 context 了，但在上报异常的时候使用 iOS 一样的 "),s("code",[t._v("hub.captureEnvelope()")]),t._v(" 却又没有 context 了，于是开始追溯这两种上报的区别。发现 message 最后也是转为了 envelope ， captureMessage() 内部上报数据有一条转换关系 message → event → envelope ，其中 context 是在 event → envelope 的过程中遍历 eventProcessors 进行赋值的，详见 "),s("code",[t._v("SentryClient.processEvent()")]),t._v(" 方法。 flutter 上报时因为传到 native 层时就是 envelope 了，如果直接用 hub.captureEnvelope() 上报就会跳过附加 context 的过程。")]),t._v(" "),s("p",[t._v("最后是通过将 envelope.items 逆向转换为 event ，再通过 "),s("code",[t._v("hub.captureEvent()")]),t._v(" 来迂回上报的方式来附加 context 。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" gsonSerializer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serializer\ngsonSerializer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deserializeEnvelope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("byteInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" envelope "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" envelope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" event "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gsonSerializer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n        hub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("captureEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("如果有一些 Native 添加的 context 需要同步给 Flutter 的上报的话，可以通过如下代码实现：")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("HubAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureScope")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" native "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    hub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureScope")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" flutter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" native"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contexts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          flutter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setContexts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"不能调-integration-的-register"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不能调-integration-的-register"}},[t._v("#")]),t._v(" 不能调 integration 的 register")]),t._v(" "),s("p",[t._v("在上一步，如果仿照 Native 的初始化过程，也调了 integration 的 "),s("code",[t._v("register")]),t._v(" 方法，会导致 Android 的 Crash 无法捕获，但不影响主动调用 Native Sentry 的上报。")]),t._v(" "),s("p",[t._v("要了解原因，首先要了解 Android Crash 的捕获流程。一切都是基于 "),s("code",[t._v("Thread.setDefaultUncaughtExceptionHandler()")]),t._v(" 。")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee244",code:t.$dataBlock.mermaid_382ee244}}),s("p",[t._v("异常的原因是因为 "),s("code",[t._v("Thread.setDefaultUncaughtExceptionHandler()")]),t._v(" 和 "),s("code",[t._v("UncaughtExceptionHandler.Adapter.getInstance()")]),t._v(" 均是单例。而 Native 的 Options 先于 Flutter 的 Options 创建。")]),t._v(" "),s("p",[t._v("Flutter 的 Options 创建并调用 integration 注册时，覆盖了 Native 的设置，导致 Crash 被 Flutter 的 Options 捕获了。")]),t._v(" "),s("p",[t._v("iOS 不影响是因为它的 integration 注册和调用时强制指向了 SentrySDK.currentHub 的单例，重新调用也没事。")])],1)}),[],!1,null,null,null);"function"==typeof e&&e(r);n.default=r.exports}}]);